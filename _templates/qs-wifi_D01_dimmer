---
date_added: 2019-12-06
title: QS-WiFi-D01-TRIAC 150W
category: relay
type: Dimmer Module
standard: global
mlink: http://www.aihomestyle.com/content/170.html
link: https://www.aliexpress.com/item/33010332202.html
link2: https://www.banggood.com/MoesHouse-DIY-Smart-WiFi-Light-LED-Dimmer-Switch-Smart-LifeTuya-APP-Remote-Control-12-Way-Switch-Works-With-Alexa-Echo-Google-Home-p-1509161.html
image: /assets/device_images/qs-wifi_D01_dimmer.webp
template: '{"NAME":"WiFi-Dimmer","GPIO":[0,148,0,149,0,0,0,0,0,42,37,0,0],"FLAG":0,"BASE":18}' 
template9: ' {"NAME":"QS-WiFi-D01-TRIAC","GPIO":[0,3200,0,3232,0,0,0,0,0,352,416,0,0,0],"FLAG":0,"BASE":18}'
---
The **Wi-Fi Smart Dimmer Module 150W** is an in-wall push-button dimmer switch, manufactured by Aihomestyle Co LTD and sold as white-label QS-WiFi-D01-TRIAC and also by various brands e.g., _Moes, MoesHouse MS-105, HomCloud, Malmbergs, TOOGOO, Baakey, ..._

![dimmer-1](https://user-images.githubusercontent.com/36734573/62205945-ef1f9e00-b390-11e9-89c6-05173e559a97.jpg)

Art. No. **QS-WIFI-D01-TRIAC**  
- **Trailing-Edge Phase Dimmer**, definitely not TRIAC but Power MOSFET driven 
- for **dimmable LED light bulbs, dimmable power supplies, incandescent/halogen bulbs,...**

### Technical Data:
- Smart Wi-Fi Push-Button Dimmer Module
- Rated Voltage	AC 220-240V / 50Hz
- Rated Current	0.6A
- Load max. 150W for LED lamp
- Size LxWxH 51mm x 47mm x 22mm

The Dimmer has a **LM1 ESP8266** module with 1MB Flash onboard, combined with a **STM8 MCU** on a separate board.

![dimmer-flash-lingan](https://user-images.githubusercontent.com/36734573/62205236-4c1a5480-b38f-11e9-882e-f49187c0f1f8.jpg)

### Flashing Guide

#### OTA
This dimmer is based on Smart Life / **Tuya** App. [Tuya-Convert](https://tasmota.github.io/docs/Tuya-Convert/) currently works, but could be patched with future firmware updates.

#### Serial
- ⚠️️ **Special Attention** ⚠️️ 
- **Do not connect AC power and the serial connection at the same time!** 
- The dimmer circuit is directly connected to the AC wires!

Follow all the recommended serial flashing procedures outlined in the [Tasmota Flashing Guide](https://github.com/arendst/Sonoff-Tasmota/wiki/Flashing).

The case can easily be opened by pressing both sides of the lower half of the case.
One method to flash the device is to desolder the ESP/MCU module from the main PCB.

![dimmer-flash-1-LM1](https://user-images.githubusercontent.com/36734573/67523104-442c3100-f6ae-11e9-8979-4ff841097b73.jpg)

It's also possible to flash the ESP8266 when the PCB is not desoldered, but it is a bit difficult to reach RX and TX. 
To get the module into **Flash Mode**, you have to connect `RE` **and** `GPIO0` **to GND** (`RE` to GND disables the STM8 MCU while flashing).

![dimmer-flash-3-mcu](https://user-images.githubusercontent.com/36734573/62205335-85eb5b00-b38f-11e9-83ac-e94842b32dfb.jpg)

![dimmer-flash-2](https://user-images.githubusercontent.com/36734573/62205327-808e1080-b38f-11e9-8aa6-1af8a7db4aad.jpg)

![dimmer-flash-4](https://user-images.githubusercontent.com/36734573/62205342-8ab00f00-b38f-11e9-9d4a-e28af130ac2e.jpg)

### Configuration
Use the Template from above or set the module as `Generic (18)` and assign the following components:

| GPIO | Component |
| -- | -- |
| 1 |  Serial Tx (148) |
| 3 |  Serial Rx (149) |
| 13 | Counter1 (42) |
| 14 | PWM1 (37)<BR>(or any unused GPIO) |

See [@anarchistdevop](https://github.com/anarchistdevop/Tasmota_QS-WiFi-D01-TRIAC) github for more info

![dimmer-module](https://user-images.githubusercontent.com/36734573/62205050-d31afd00-b38e-11e9-9529-b564ac0faff7.png)

### Wiring Diagram:
![dimmer-wiring-diagram](https://user-images.githubusercontent.com/36734573/62213502-58a8a800-b3a3-11e9-81a4-1a37461f5f68.png)

The `S` **switch input** is intended for push-button / conventional momentary switch control and detects the mains frequency when the button is pressed. This makes it special and therefore it requires a Tasmota **Script** for **ON/OFF** and **HOLD** (long press) dimming operation.

Download script by thxthx0:
- [Dimmer Script v2.0a](https://gist.github.com/thxthx0/c22555f6ec25c3367264729a0ff74dce) for Tasmota 9.5+ (dimming stops when minimum or maximum brightness is reached)
- [Dimmer Script v2.0a](https://gist.github.com/thxthx0/12074f1f5249e14b2a0aada75f590c9b) for Tasmota 9.5+ (changes the dimming direction when min/max brightness is reached and doesn't stop dimming)
- [Dimmer Script v1.0](https://gist.github.com/thxthx0/c22555f6ec25c3367264729a0ff74dce#file-wifi-dimmer-script-txt) for older Tasmota versions

To use the script, you need Tasmota with [Scripting](https://tasmota.github.io/docs/Scripting-Language) enabled. [Download](https://github.com/tasmota/install/tree/main/firmware/unofficial) unofficial precompiled firmware from development branch.

Once the device is flashed with Tasmota, open `Configuration` -> `Edit script` in the web UI and paste the contents of the script in the window. Then set the `script enable` checkbox and push `Restart`.
To hide "Counter1" in the WebUI you can enter `WebSensor1 0` on the Tasmota Console.

### How it works:
Whenever the button is pressed there are 50/60 Hz pulses on the `S` switch input. The frequency detection circuit (below) is connected to GPIO13 of the ESP8266 chip.

![pushbutton-input](https://user-images.githubusercontent.com/36734573/61955930-5d90e480-afbc-11e9-8d7e-00ac526874d3.png)

These pulses must be processed as a switching signal with a counter. The ESP8266 then sends commands accordingly via the hardware serial interface for dimming operation, which are handled by a second microcontroller (STM8S003F3 MCU). The serial communication at 9600 baud is simple, just one command with changing brightness `xx` values: `FF 55 xx 05 DC 0A`

### What the Script does:
Switching in Tasmota is usually done by High/Low (+3.3V/GND) changes on a GPIO. Here, however, this is achieved by a pulse frequency when connected to a GPIO. These pulses are captured by `Counter1` in Tasmota.

- When the **light is OFF** and there is a **short period** of pulses **->** then turn the light **ON** at the previous dimmer level.
- When the **light is ON** and there is a **short period** of pulses **->** then turn the light **OFF**.
- When there is a longer period of pulses (i.e., **HOLD**) **->** toggle dimming direction and then **adjust the brightness level** as long as the button is pressed or until the limits are reached.

In the **Data Section** `>D` at the beginning of the script, the following initialization variables may be changed:
- **dim step** -> `1..5` - sets the dimming increment value
- **dim multiplier** -> `1..2.55` - values lower than 2.55 reduce the dimmer range (100..255)
- **dim lower limit** -> min `0` - lower limit for the dimmer value for push-button operation (set according to your bulb) 
- **dim upper limit** -> max `100` - upper limit for the dimmer value for push-button operation (set according to your bulb) 
- **start dim level** -> `0..100` - initial dimmer level after power-up or restart 

### Further Information:
[**Support for Wi-Fi Dimmer?** #5737](https://github.com/arendst/Sonoff-Tasmota/issues/5737)  
[**Switching by Mains Power Frequency** #6085](https://github.com/arendst/Sonoff-Tasmota/issues/6085)  

### Additional Pictures:
![dimmer-2](https://user-images.githubusercontent.com/36734573/62205974-ff377d80-b390-11e9-82f5-4505f39ebf7c.jpg)

![dimmer-3](https://user-images.githubusercontent.com/36734573/62205982-0494c800-b391-11e9-9268-283c4b65b8ad.jpg)

![dimmer-4](https://user-images.githubusercontent.com/36734573/62205992-0c546c80-b391-11e9-8f87-374e4733edba.jpg)

![dimmer-5](https://user-images.githubusercontent.com/36734573/62206003-11192080-b391-11e9-88e9-887fbf71b680.jpg)

![dimmer-6](https://user-images.githubusercontent.com/36734573/62206012-170f0180-b391-11e9-8a3d-38d5b59f17de.jpg)

