---
date_added: 2021-05-17
title: Unexpected Maker FeatherS3
model: FeatherS3
category: diy
type: Development Board
standard: global
mlink: https://esp32s3.com/feathers3.html
image: /assets/images/unexpectedmaker_feathers3.jpg
flash: serial
chip: s3
templates3: {"NAME":"FeatherS3","GPIO":[1,1,4704,1,4768,1,1,1,1,1,1,1,1,288,1,0,0,1,1,0,0,0,1,0,1,1,1,1,3840,1376,0,0,3200,3232,0,0,0,0],"FLAG":0,"BASE":1}
link: https://unexpectedmaker.com/shop/feathers3
---

A Feather form factor ESP32-S3 dev board with 1S LiPo battery monitoring.

This board uses an [`ESP32-S3`](https://www.espressif.com/sites/default/files/documentation/esp32-s3_datasheet_en.pdf) chip with no onboard flash or PSRAM with an external 16 MB SPI flash chip and an external 8MB PSRAM chip.

## Flashing

When the board is booted into debug by holding `BOOT` and pressing the `RESET` button the USB-Serial chip on the USB port exposes a serial connection. This can be used to easily flash new firmware.

For flashing via `tasmota32s3-bluetooth.factory.bin`, download the [tasmota32s3-bluetooth.factory.bin](https://github.com/tasmota/install/raw/main/firmware/unofficial/tasmota32s3-bluetooth.factory.bin) file.

```sh
esptool.py --chip esp32s3 --baud 115200 --before default_reset --after hard_reset --flash_mode dio --flash_size detect --flash_freq 80m write_flash --erase-all -z 0x0 tasmota32s3-bluetooth.factory.bin
```

_Flash mode (`dio`) and frequency (`80m`) should be used when flashing, otherwise the new firmware won't boot properly_

## Device Notes

![Unexpected Maker FeatherS3 Front](/assets/images/unexpectedmaker_feathers3_front.jpg "Unexpected Maker FeatherS3 Front")

![Unexpected Maker FeatherS3 Pinout](/assets/images/unexpectedmaker_feathers3_pinout.jpg "Unexpected Maker FeatherS3 Pinout")

[FeatherS3 Schematic](https://esp32s3.com/files/schematic-feathers3.pdf)

## Peripherals

* [`WS2812B`](https://cdn-shop.adafruit.com/datasheets/WS2812B.pdf) Neopixel
    * On `GPIO40` _(configured as `WS2812`)_ with power on `GPIO39` _(configured as `Output Hi`)_.
* 1x Blue Status LED
    * On `GPIO13` _(configured as `LED 1`)_.
* 1x Ambient light sensor ([`ALS-PT19`](https://cdn.sparkfun.com/assets/b/e/c/3/d/ALS-PT19_DS.pdf))
    * On `GPIO4`  _(configured as `Analog2`)_.
* 2x [STEMMA-QT](https://learn.adafruit.com/introducing-adafruit-stemma-qt/what-is-stemma-qt) JST-SH I2C bus connector
    * Both ports share the same bus, on `GPIO9` (SCL) and `GPIO8` (SDA) _(configured as `I2C 1`)_. These ports are on the same bus as the `SCL` and `SDA` pins labelled on the board.
* 1S LiPo battery management subsystem with 2-pin JST-PH connector
    * Battery voltage divider on `GPIO2` _(configured as `Analog1`)_ and 5V/USB voltage detection on `GPIO34` _(not configured)_

## GPIO Pin Mapping

The user pins labelled on the board are set up as `User` pins in the template.The pin numbers match the ESP's internal GPIO number assignments allowing relatively easy module configuration without having to translate pin.

The only exception are the pins labeled `TX` and `RX`, which are set up as `Serial TX/RX` in the template.